{"version":3,"file":"assets/ManageList.js","sources":["webpack:///./src/com/didichuxing/ultron/modules/manageList/MManageList.ts"],"sourcesContent":["import { AModuleModel } from 'com/didichuxing/commonInterface/AModuleModel';\nimport { observable, action, runInAction, computed } from 'mobx';\nimport * as IGetQueryAllList from '@ultron/remote/managePage/interfaces/IGetMessageQueryAll';\nimport {\n    messageQueryAll,\n    messageSearch,\n    messageDelete,\n    messageDeletes\n} from '@ultron/remote/managePage';\nimport moment from 'moment';\nexport interface ICreateWorkOrderQuery {\n}\n\nlet count: number = 0;\n/**\n * 列表项\n */\nexport class ModelListItem {\n    public key: string = String(count++);\n    public item: IGetQueryAllList.IReturnItem;\n    constructor(p: IGetQueryAllList.IReturnItem) {\n        this.item = p;\n    }\n    /**\n     * 消息内容\n     */\n    public get vMessage(): string {\n        return this.item.message;\n    }\n\n    /**\n     * 发布时间\n     */\n    public get vSendTime(): string {\n        if (this.item.sendTime) {\n            return moment(Number(this.item.sendTime) * 1000).format('YYYY-MM-DD HH:mm');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * 撤回时间\n     */\n    public get vExpireTime(): string {\n        if (this.item.expireTime) {\n            return moment(Number(this.item.expireTime) * 1000).format('YYYY-MM-DD HH:mm');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * 发布人\n     * @returns {string}\n     */\n    public get vUpdateUser(): string {\n        return this.item.updateUser;\n    }\n\n    /**\n     * 更新时间\n     * @returns {string}\n     */\n    public get vUpdateTime(): string {\n        if (this.item.updateTime) {\n            return moment(Number(this.item.updateTime) * 1000).format('YYYY-MM-DD HH:mm');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * 重要级别\n     */\n    public get vLevel(): string {\n        if (this.item.level === 10) {\n            return '紧急';\n        } else if (this.item.level === 20) {\n            return '重要';\n        } else {\n            return '普通';\n        }\n    }\n\n    /**\n     * 状态\n     */\n    public get vStatus(): string {\n        if (this.item.status === 10) {\n            return '空闲';\n        } else if (this.item.status === 20) {\n            return '待发布';\n        } else {\n            return '已发布';\n        }\n    }\n\n    /**\n     * 操作\n     */\n    public get vHandle(): string {\n        return '删除';\n    }\n}\n\nexport default class ModelManageList extends AModuleModel implements ICreateWorkOrderQuery {\n    @observable public searchContent: string = '';\n    @observable public page: number = 1;\n    public readonly SIZE: number = 10;\n    @observable public total: number = 0;\n    @observable public list: ModelListItem[] = [];\n    @observable public loading: boolean = false;\n    @observable public deleteId: string = '';\n    @observable public deleteIds: string = '';\n    @observable public deployId: string = '';\n    @observable public sendTime: string = '';\n    @observable public expireTime: string = '';\n    @observable public level: string = '30';\n    @observable public messages: string = '';\n    public timer: any = null;\n\n    constructor(query?: ICreateWorkOrderQuery, S?: string) {\n        super();\n        this.initByQueryFields(query);\n    }\n    protected getQueryFields(): Array<keyof ICreateWorkOrderQuery> {\n        return [];\n    }\n\n    /**\n     * 加载列表\n     * @returns {Promise<void>}\n     */\n    public async loadDataList(): Promise<void> {\n        try {\n            const ajaxParams = {\n                page: this.page,\n                size: this.SIZE\n            };\n            const resData = await messageQueryAll(ajaxParams);\n            if (resData) {\n                this.total = resData.total;\n            }\n            if (resData.data && resData.data.length > 0) {\n                this.list = resData.data.map((it) => new ModelListItem(it));\n            }\n            if (!this.timer) {\n                this.timer = setInterval(() => {\n                    this.loadDataList();\n                }, 10000);\n            }\n        } finally {\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    }\n\n    /**\n     * 查询按钮渲染数据\n     * @returns {Promise<void>}\n     */\n    public async searchDataList(): Promise<void> {\n        try {\n            const searchParams = {\n                content: this.searchContent\n            };\n            const result = await messageSearch(searchParams);\n            if (result) {\n                this.total = result.total;\n            }\n            if (result.data && result.data.length > 0) {\n                this.list = result.data.map((item) => new ModelListItem(item));\n            } else {\n                this.list = [];\n            }\n        } finally {\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    }\n\n    /**\n     * 撤回消息渲染接口\n     * @returns {Promise<void>}\n     */\n    public async messageDelete(): Promise<void> {\n        try {\n            const deleteParams = {\n                id: this.deleteId\n            };\n            await messageDelete(deleteParams);\n            await this.loadDataList();\n        } catch (e) {}\n    }\n\n    /**\n     * 删除消息渲染接口\n     * @returns {Promise<void>}\n     */\n    public async messageDeletes(): Promise<void> {\n        try {\n            const deletesParams = {\n                id: this.deleteIds\n            };\n            await messageDeletes(deletesParams);\n            await this.loadDataList();\n        } catch (e) {}\n    }\n\n    /**\n     * 最小页数\n     * @returns {number}\n     */\n    private get minPage(): number {\n        return 1;\n    }\n\n    /**\n     * 最大页数\n     * @returns {number}\n     */\n    private get maxPage(): number {\n        return Math.floor(this.total / this.SIZE) + 1;\n    }\n\n    /**\n     * 前往某页\n     * @param {number} n\n     */\n    @action\n    public toPage(n: number): void {\n        if (n !== this.minPage && (n < this.minPage || n > this.maxPage)) {\n            return;\n        }\n        this.page = n;\n        this.loadDataList();\n    }\n\n    @computed\n    public get vPage(): number {\n        return Number(this.page) || this.minPage;\n    }\n\n    /**\n     * 下一页\n     */\n    public toNextPage(): void {\n        this.toPage(this.page + 1);\n    }\n\n    /**\n     * 上一页\n     */\n    public toPrevPage(): void {\n        this.toPage(this.page - 1);\n    }\n\n    /**\n     * 加载数据（程序的起点）\n     */\n    public loadData(): void {\n        this.toPage(this.minPage);\n    }\n\n    /**\n     * 输入查询的内容\n     * @param val\n     */\n    @action\n    public setSearchContent(val): void {\n        this.searchContent = val;\n    }\n\n    /**\n     * 要撤回的Id\n     * @param val\n     */\n    @action\n    public setDeleteId(val): void {\n        this.deleteId = val;\n        this.messageDelete();\n    }\n\n    /**\n     * 要删除的Id\n     * @param val\n     */\n    @action\n    public setDeleteIds(val): void {\n        this.deleteIds = val;\n        this.messageDeletes();\n    }\n\n    /**\n     * 要发布的Id\n     */\n    @action\n    public setDeployId(it): void {\n        this.deployId = it.id;\n        this.messages = it.messages;\n        this.sendTime = it.sendTime;\n        this.expireTime = it.expireTime;\n        this.level = it.level;\n    }\n}\n"],"mappings":"AAaA","sourceRoot":""}