{"version":3,"file":"assets/PressureUs19.js","sources":["webpack:///./src/com/didichuxing/ultron/modules/pressureUser/ModelPressureUser.ts"],"sourcesContent":["import { AModuleModel } from 'com/didichuxing/commonInterface/AModuleModel';\nimport { observable, action, runInAction, computed } from 'mobx';\nimport * as ISearch from '@ultron/remote/tool/interfaces/ISearch';\nimport { getSearch } from '@ultron/remote/tool';\nimport message from '@antd/message';\nexport interface ICreateWorkOrderQuery {\n}\n\nlet count: number = 0;\n/**\n * 列表项\n */\nexport class ModelListItem {\n    public key: string = String(count++);\n    public item: ISearch.IReturnItem;\n\n    constructor(p: ISearch.IReturnItem) {\n        this.item = p;\n    }\n\n    /**\n     * 类型\n     * @returns {string}\n     */\n    public get vType(): string {\n        return this.item.role;\n    }\n\n    /**\n     * 地区\n     * @returns {any}\n     */\n    public get vRegion(): string {\n        return this.item.region;\n    }\n\n    /**\n     * uid\n     * @returns {any}\n     */\n    public get vUid(): string {\n        return this.item.uid;\n    }\n\n    /**\n     * 手机号\n     * @returns {any}\n     */\n    public get vPhone(): string {\n        return this.item.phone;\n    }\n\n    /**\n     * 业务线\n     * @returns {any}\n     */\n    public get vBusiness(): string {\n        return this.item.business;\n    }\n\n    /**\n     * 城市\n     * @returns {any}\n     */\n    public get vCity(): string {\n        if (Number(this.item.cityId) === -1) {\n            return '--';\n        } else {\n            return this.item.cityId;\n        }\n    }\n}\n\nexport default class ModelPressureUser extends AModuleModel implements ICreateWorkOrderQuery {\n    @observable public searchNumber: string = '';\n    @observable public list: ModelListItem[] = [];\n\n    constructor(query?: ICreateWorkOrderQuery, S?: string) {\n        super();\n        this.initByQueryFields(query);\n    }\n    protected getQueryFields(): Array<keyof ICreateWorkOrderQuery> {\n        return [];\n    }\n\n    public async searchData(): Promise<void> {\n        if (this.searchNumber === '') {\n            message.error('UID或者手机号不能为空');\n        }\n        try {\n            if (this.searchNumber !== '') {\n                const resData = await getSearch({\n                    checkValue: this.searchNumber\n                });\n                runInAction(() => {\n                    if (resData && resData.length > 0) {\n                        this.list = resData.map((item) => new ModelListItem(item));\n                    }\n                });\n            }\n        } catch (e) {}\n    }\n\n    /**\n     * 接收传过来的UID或者手机号\n     * @param val\n     */\n    @action\n    public searchInput(val: string): void {\n        this.searchNumber = val;\n    }\n}\n"],"mappings":"AAQA","sourceRoot":""}